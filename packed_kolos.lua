package.path=package.path..";KolOS/?.lua" local GUI={}GUI.__index=GUI local function components_Frame()local Frame={}Frame.__index=Frame package.path=package.path..";KolOS/components/?.lua" local function Button()local Button={}Button.__index=Button function Button:new(x,y,label,callback,bgColor,textColor,width,height,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y label=params.label callback=params.callback bgColor=params.bgColor textColor=params.textColor width=params.width height=params.height zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 0 obj.y=y or 0 obj.label=label or "" obj.callback=callback or{}obj.bgColor=bgColor or colors.gray obj.textColor=textColor or colors.white obj.width=width or#obj.label+2 obj.height=height or 1 obj.zIndex=zIndex or 0 return obj end function Button:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Button:setSize(width,height)self.width=width or self.width self.height=height or self.height self.frame:draw()return self end function Button:setLabel(label,width,height)self.label=label or self.label self.width=width or#self.label+2 self.height=height or 1 self.frame:draw()return self end function Button:setBgColor(bgColor,textColor)self.bgColor=bgColor or self.bgColor self.textColor=textColor or self.textColor self.frame:draw()return self end function Button:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Button:addCallback(callback)table.insert(self.callback,callback or function()end)self.frame:draw()return self end function Button:draw(canvas)for i=0,self.height-1 do local y=self.y+i for j=0,self.width-1 do local x=self.x+j if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end if i==math.floor(self.height/2)and j>=math.floor((self.width-#self.label)/2)and j<math.floor((self.width-#self.label)/2)+#self.label then canvas[y][x].char=self.label:sub(j-math.floor((self.width-#self.label)/2)+1,j-math.floor((self.width-#self.label)/2)+1)else canvas[y][x].char=" " end canvas[y][x].charColor=self.textColor end end end end function Button:handleClick(mx,my)if mx>=self.x and mx<self.x+self.width and my>=self.y and my<self.y+self.height then for _,cb in ipairs(self.callback)do cb()end end end function Button:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.label then self.label=params.label end if params.callback then self.callback=params.callback end if params.bgColor then self.bgColor=params.bgColor end if params.textColor then self.textColor=params.textColor end if params.width then self.width=params.width end if params.height then self.height=params.height end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Button end local Button=Button()local function Input()local Input={}Input.__index=Input function Input:new(x,y,width,maxLength,bgColor,textColor,replaceChar,history,completeFn,default,callback,deactivateOnEnter,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y width=params.width maxLength=params.maxLength bgColor=params.bgColor textColor=params.textColor replaceChar=params.replaceChar history=params.history completeFn=params.completeFn default=params.default callback=params.callback deactivateOnEnter=params.deactivateOnEnter zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 0 obj.y=y or 0 obj.width=width or 10 obj.text=default or "" obj.active=false obj.cursorPos=#obj.text obj.scrollOffset=0 obj.maxLength=maxLength or obj.width obj.bgColor=bgColor or colors.white obj.textColor=textColor or colors.black obj.replaceChar=replaceChar obj.history=history or{}obj.completeFn=completeFn obj.historyIndex=#obj.history+1 obj.completions={}obj.completionIndex=0 obj.callback=callback obj.deactivateOnEnter=deactivateOnEnter~=false obj.zIndex=zIndex or 0 return obj end function Input:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Input:setSize(width,maxLength)self.width=width or self.width self.maxLength=maxLength or self.maxLength self.frame:draw()return self end function Input:setColors(bgColor,textColor)self.bgColor=bgColor or self.bgColor self.textColor=textColor or self.textColor self.frame:draw()return self end function Input:setReplaceChar(replaceChar)self.replaceChar=replaceChar self.frame:draw()return self end function Input:setHistory(history)self.history=history or{}self.historyIndex=#self.history+1 self.frame:draw()return self end function Input:setCompleteFn(completeFn)self.completeFn=completeFn self.frame:draw()return self end function Input:setDefault(default)self.text=default or "" self.cursorPos=#self.text self.scrollOffset=0 self.frame:draw()return self end function Input:setCallback(callback)self.callback=callback self.frame:draw()return self end function Input:setDeactivateOnEnter(deactivateOnEnter)self.deactivateOnEnter=deactivateOnEnter self.frame:draw()return self end function Input:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Input:addHistory(item)table.insert(self.history,item)self.historyIndex=#self.history+1 self.frame:draw()return self end function Input:draw(canvas)for i=1,self.width do local x=self.x+i-1 local y=self.y if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end local char=self.text:sub(self.scrollOffset+i,self.scrollOffset+i)if self.replaceChar then char=char~="" and self.replaceChar or " " end canvas[y][x].char=char~="" and char or " " canvas[y][x].charColor=self.textColor end end if self.active then local cursorX=self.x+self.cursorPos-self.scrollOffset if canvas[self.y]and canvas[self.y][cursorX]then canvas[self.y][cursorX].bgColor=self.textColor canvas[self.y][cursorX].charColor=self.bgColor local char=self.text:sub(self.cursorPos+1,self.cursorPos+1)if self.replaceChar then char=char~="" and self.replaceChar or "_" end canvas[self.y][cursorX].char=char~="" and char or "_" end end if self.active and#self.completions>0 then local suggestion=self.completions[self.completionIndex]for i=1,#suggestion do local x=self.x+self.cursorPos-self.scrollOffset+i if canvas[self.y+1]and canvas[self.y+1][x]then canvas[self.y+1][x].bgColor=self.textColor canvas[self.y+1][x].char=suggestion:sub(i,i)canvas[self.y+1][x].charColor=self.bgColor end end end end function Input:handleClick(mx,my)if mx>=self.x and mx<self.x+self.width and my==self.y then self.active=true self.cursorPos=math.min(mx-self.x+self.scrollOffset,#self.text)else self.active=false end end function Input:updateCompletions()if self.completeFn then self.completions=self.completeFn(self.text:sub(1,self.cursorPos))or{}self.completionIndex=1 else self.completions={}self.completionIndex=0 end end function Input:handleInput(event,param)if self.active and event=="char" then self.historyIndex=#self.history+1 if#self.text<self.maxLength then self.text=self.text:sub(1,self.cursorPos)..param..self.text:sub(self.cursorPos+1)self.cursorPos=self.cursorPos+1 if self.cursorPos>self.scrollOffset+self.width then self.scrollOffset=self.scrollOffset+1 end end self:updateCompletions()elseif self.active and event=="key" then if param==keys.backspace then self.historyIndex=#self.history+1 if self.cursorPos>0 then self.text=self.text:sub(1,self.cursorPos-1)..self.text:sub(self.cursorPos+1)self.cursorPos=self.cursorPos-1 if self.cursorPos<self.scrollOffset then self.scrollOffset=self.scrollOffset-1 end end if#self.text==0 then self.completions={}self.completionIndex=0 else self:updateCompletions()end elseif param==keys.enter then if self.history[#self.history]~=self.text then table.insert(self.history,self.text)end self.historyIndex=#self.history+1 if self.callback then self.callback(self.text)end self.text="" self.cursorPos=0 if self.deactivateOnEnter then self.active=false end self:updateCompletions()elseif param==keys.left then if self.cursorPos>0 then self.cursorPos=self.cursorPos-1 if self.cursorPos<self.scrollOffset then self.scrollOffset=self.scrollOffset-1 end self:updateCompletions()end elseif param==keys.right then if self.cursorPos<#self.text then self.cursorPos=self.cursorPos+1 if self.cursorPos>self.scrollOffset+self.width then self.scrollOffset=self.scrollOffset+1 end self:updateCompletions()end elseif param==keys.up then if#self.completions>0 then self.completionIndex=(self.completionIndex-2)%#self.completions+1 elseif self.history and self.historyIndex>1 then self.historyIndex=self.historyIndex-1 self.text=self.history[self.historyIndex]or "" self.cursorPos=#self.text self.scrollOffset=math.max(0,self.cursorPos-self.width)end elseif param==keys.down then if#self.completions>0 then self.completionIndex=self.completionIndex%#self.completions+1 elseif self.history and self.historyIndex<#self.history then self.historyIndex=self.historyIndex+1 self.text=self.history[self.historyIndex]or "" self.cursorPos=#self.text self.scrollOffset=math.max(0,self.cursorPos-self.width)end elseif param==keys.tab and#self.completions>0 then local completion=self.completions[self.completionIndex]self.text=self.text:sub(1,self.cursorPos)..completion self.cursorPos=#self.text self.scrollOffset=math.max(0,self.cursorPos-self.width)self:updateCompletions()end elseif self.active and event=="paste" then local pasteText=param if#self.text+#pasteText<=self.maxLength then self.text=self.text:sub(1,self.cursorPos)..pasteText..self.text:sub(self.cursorPos+1)self.cursorPos=self.cursorPos+#pasteText if self.cursorPos>self.scrollOffset+self.width then self.scrollOffset=self.scrollOffset+#pasteText end end self:updateCompletions()end end function Input:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.width then self.width=params.width end if params.maxLength then self.maxLength=params.maxLength end if params.bgColor then self.bgColor=params.bgColor end if params.textColor then self.textColor=params.textColor end if params.replaceChar then self.replaceChar=params.replaceChar end if params.history then self.history=params.history end if params.completeFn then self.completeFn=params.completeFn end if params.default then self.text=params.default end if params.callback then self.callback=params.callback end if params.deactivateOnEnter~=nil then self.deactivateOnEnter=params.deactivateOnEnter end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Input end local Input=Input()local function Label()local Label={}Label.__index=Label function Label:new(x,y,text,textColor,bgColor,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y text=params.text textColor=params.textColor bgColor=params.bgColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 1 obj.y=y or 1 obj.text=text or " " obj.textColor=textColor or colors.white obj.bgColor=bgColor or colors.black obj.zIndex=zIndex or 0 return obj end function Label:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Label:setText(newText)self.text=newText self.frame:draw()return self end function Label:setColors(textColor,bgColor)self.textColor=textColor or self.textColor self.bgColor=bgColor or self.bgColor self.frame:draw()return self end function Label:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Label:draw(canvas)for i=1,#self.text do local x=self.x+i-1 local y=self.y if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end canvas[y][x].char=self.text:sub(i,i)canvas[y][x].charColor=self.textColor end end end function Label:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.text then self.text=params.text end if params.textColor then self.textColor=params.textColor end if params.bgColor then self.bgColor=params.bgColor end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Label end local Label=Label()local function KeyHandler()local KeyHandler={}KeyHandler.__index=KeyHandler function KeyHandler:new()local obj=setmetatable({},self)obj.keyMappings={}return obj end function KeyHandler:registerKey(key,action)self.keyMappings[key]=action end function KeyHandler:handleKey(key)if self.keyMappings[key]then self.keyMappings[key]()end end return KeyHandler end local KeyHandler=KeyHandler()local function Textarea()local Textarea={}Textarea.__index=Textarea function Textarea:new(x,y,width,height,bgColor,textColor,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y width=params.width height=params.height bgColor=params.bgColor textColor=params.textColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 1 obj.y=y or 1 obj.width=width or 10 obj.height=height or 5 obj.list={}obj.textList={}obj.active=false obj.bgColor=bgColor or colors.white obj.textColor=textColor or colors.black obj.scrollOffset=0 obj.zIndex=zIndex or 0 return obj end function Textarea:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Textarea:setSize(width,height)self.width=width or self.width self.height=height or self.height self:updateTextList()self.frame:draw()return self end function Textarea:setColors(bgColor,textColor)self.bgColor=bgColor or self.bgColor self.textColor=textColor or self.textColor self.frame:draw()return self end function Textarea:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Textarea:draw(canvas)for i=1,self.height do local y=self.y+i-1 local line=self.textList[i+self.scrollOffset]or "" for j=1,self.width do local x=self.x+j-1 if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end canvas[y][x].char=line:sub(j,j)~="" and line:sub(j,j)or " " canvas[y][x].charColor=self.textColor end end end end function Textarea:updateTextList()self.textList={}for _,line in ipairs(self.list)do while#line>self.width do table.insert(self.textList,line:sub(1,self.width))line=line:sub(self.width+1)end table.insert(self.textList,line)end self.scrollOffset=math.max(0,#self.textList-self.height)end function Textarea:setText(newText)self.list={}for line in newText:gmatch("[^\r\n]+")do table.insert(self.list,line)end self:updateTextList()self.frame:draw()return self end function Textarea:addLine(line)table.insert(self.list,line)self:updateTextList()self.frame:draw()return self end function Textarea:scrollUp()if self.scrollOffset>0 then self.scrollOffset=self.scrollOffset-1 end end function Textarea:scrollDown()if self.scrollOffset<#self.textList-self.height then self.scrollOffset=self.scrollOffset+1 end end function Textarea:isMouseOver(mx,my)return mx>=self.x and mx<self.x+self.width and my>=self.y and my<self.y+self.height end function Textarea:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.width then self.width=params.width end if params.height then self.height=params.height end if params.bgColor then self.bgColor=params.bgColor end if params.textColor then self.textColor=params.textColor end if params.zIndex then self.zIndex=params.zIndex end self:updateTextList()self.frame:draw()return self end return Textarea end local Textarea=Textarea()local function Rect()local Rect={}Rect.__index=Rect function Rect:new(x,y,width,height,bgColor,fill,char,charColor,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y width=params.width height=params.height bgColor=params.bgColor fill=params.fill char=params.char charColor=params.charColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 0 obj.y=y or 0 obj.width=width or 1 obj.height=height or 1 obj.bgColor=bgColor or colors.gray obj.fill=fill or false obj.char=char or " " obj.charColor=charColor or colors.white obj.zIndex=zIndex or 0 return obj end function Rect:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Rect:setSize(width,height)self.width=width or self.width self.height=height or self.height self.frame:draw()return self end function Rect:setColors(bgColor,charColor)self.bgColor=bgColor or self.bgColor self.charColor=charColor or self.charColor self.frame:draw()return self end function Rect:setChar(char)self.char=char or self.char self.frame:draw()return self end function Rect:setFill(fill)self.fill=fill or self.fill self.frame:draw()return self end function Rect:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Rect:draw(canvas)for i=0,self.height-1 do for j=0,self.width-1 do if self.fill or i==0 or i==self.height-1 or j==0 or j==self.width-1 then local x=self.x+j local y=self.y+i if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end canvas[y][x].char=self.char canvas[y][x].charColor=self.charColor end end end end end function Rect:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.width then self.width=params.width end if params.height then self.height=params.height end if params.bgColor then self.bgColor=params.bgColor end if params.charColor then self.charColor=params.charColor end if params.char then self.char=params.char end if params.fill~=nil then self.fill=params.fill end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Rect end local Rect=Rect()local function Dropdown()local Dropdown={}Dropdown.__index=Dropdown function Dropdown:new(x,y,width,items,bgColor,textColor,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y width=params.width items=params.items bgColor=params.bgColor textColor=params.textColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 0 obj.y=y or 0 obj.width=width or 10 obj.items=items or{}obj.selectedIndex=1 obj.expanded=false obj.bgColor=bgColor or colors.gray obj.textColor=textColor or colors.white obj.scrollOffset=0 obj.zIndex=zIndex or 0 return obj end function Dropdown:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Dropdown:setSize(width)self.width=width or self.width self.frame:draw()return self end function Dropdown:setItems(items)self.items=items or self.items self.frame:draw()return self end function Dropdown:setColors(bgColor,textColor)self.bgColor=bgColor or self.bgColor self.textColor=textColor or self.textColor self.frame:draw()return self end function Dropdown:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Dropdown:draw(canvas)local function truncateText(text,maxLength)if#text<=maxLength then return text..string.rep(" ",maxLength-#text)else local halfLength=math.floor((maxLength-2)/2)local l='..' if halfLength*2+2<maxLength then l='...' end return text:sub(1,halfLength)..l..text:sub(-halfLength)end end local function drawItem(x,y,text,bgColor,textColor)for i=1,self.width do local char=text:sub(i,i)or " " if canvas[y]and canvas[y][x+i-1]then if bgColor~="alpha" then canvas[y][x+i-1].bgColor=bgColor end canvas[y][x+i-1].char=char canvas[y][x+i-1].charColor=textColor end end end local selectedItem=self.items[self.selectedIndex]or "" local truncatedItem=truncateText(selectedItem,self.width-1)drawItem(self.x,self.y,truncatedItem.."V",self.bgColor,self.textColor)if self.expanded then local maxVisibleItems=math.min(#self.items,5)local winWidth,winHeight=self.frame.win.getSize()local startY=self.y+1 if self.y+maxVisibleItems>winHeight then startY=self.y-maxVisibleItems end for i=1,maxVisibleItems do local itemIndex=i+self.scrollOffset local y=startY+i-1 local item=self.items[itemIndex]or "" local truncatedItem=truncateText(item,self.width)drawItem(self.x,y,truncatedItem,self.bgColor,self.textColor)end end end function Dropdown:handleClick(mx,my)if mx>=self.x and mx<self.x+self.width and my==self.y then self.expanded=not self.expanded elseif self.expanded and mx>=self.x and mx<self.x+self.width then local winWidth,winHeight=self.frame.win.getSize()local maxVisibleItems=math.min(#self.items,5)local startY=self.y+1 if self.y+maxVisibleItems>winHeight then startY=self.y-maxVisibleItems end if my>=startY and my<startY+maxVisibleItems then self.selectedIndex=my-startY+1+self.scrollOffset self.expanded=false else self.expanded=false end else self.expanded=false end end function Dropdown:handleScroll(direction)if self.expanded then if direction==-1 or direction==0 and self.scrollOffset>0 then self.scrollOffset=self.scrollOffset-1 elseif direction==1 and self.scrollOffset<#self.items-5 then self.scrollOffset=self.scrollOffset+1 end end end function Dropdown:handleKey(key)if self.expanded then if key==keys.up and self.scrollOffset>0 then self.scrollOffset=self.scrollOffset-1 elseif key==keys.down and self.scrollOffset<#self.items-5 then self.scrollOffset=self.scrollOffset+1 elseif key==keys.enter then self.selectedIndex=self.scrollOffset+1 self.expanded=false end end end function Dropdown:isExpanded()return self.expanded end function Dropdown:getSelectedOption()return self.items[self.selectedIndex]end function Dropdown:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.width then self.width=params.width end if params.items then self.items=params.items end if params.bgColor then self.bgColor=params.bgColor end if params.textColor then self.textColor=params.textColor end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Dropdown end local Dropdown=Dropdown()local function Switch()local Switch={}Switch.__index=Switch function Switch:new(x,y,state,callback,activeText,inactiveText,activeBgColor,inactiveBgColor,activeTextColor,inactiveTextColor,zIndex)if type(x)=="table" then local params=x x=params.x y=params.y state=params.state callback=params.callback activeText=params.activeText inactiveText=params.inactiveText activeBgColor=params.activeBgColor inactiveBgColor=params.inactiveBgColor activeTextColor=params.activeTextColor inactiveTextColor=params.inactiveTextColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 0 obj.y=y or 0 obj.state=state or false obj.callback=callback obj.activeBgColor=activeBgColor or colors.green obj.inactiveBgColor=inactiveBgColor or colors.red obj.activeTextColor=activeTextColor or colors.white obj.inactiveTextColor=inactiveTextColor or colors.white obj.activeText=activeText or "[ON]" obj.inactiveText=inactiveText or "[OFF]" obj.zIndex=zIndex or 0 return obj end function Switch:setPosition(x,y)self.x=x or self.x self.y=y or self.y self.frame:draw()return self end function Switch:setState(state)self.state=state self.frame:draw()return self end function Switch:setCallback(callback)self.callback=callback self.frame:draw()return self end function Switch:setColors(activeBgColor,inactiveBgColor,activeTextColor,inactiveTextColor)self.activeBgColor=activeBgColor or self.activeBgColor self.inactiveBgColor=inactiveBgColor or self.inactiveBgColor self.activeTextColor=activeTextColor or self.activeTextColor self.inactiveTextColor=inactiveTextColor or self.inactiveTextColor self.frame:draw()return self end function Switch:setTexts(activeText,inactiveText)self.activeText=activeText or self.activeText self.inactiveText=inactiveText or self.inactiveText self.frame:draw()return self end function Switch:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Switch:draw(canvas)self.width=self.state and#self.activeText or#self.inactiveText for i=0,self.width-1 do local x=self.x+i local y=self.y if canvas[y]and canvas[y][x]then if self.state then if self.activeBgColor~="alpha" then canvas[y][x].bgColor=self.activeBgColor end canvas[y][x].charColor=self.activeTextColor canvas[y][x].char=self.activeText:sub(i+1,i+1)else if self.inactiveBgColor~="alpha" then canvas[y][x].bgColor=self.inactiveBgColor end canvas[y][x].charColor=self.inactiveTextColor canvas[y][x].char=self.inactiveText:sub(i+1,i+1)end end end end function Switch:handleClick(x,y)if x>=self.x and x<self.x+self.width and y==self.y then self.state=not self.state if self.callback then self.callback(self.state)end end end function Switch:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.state~=nil then self.state=params.state end if params.callback then self.callback=params.callback end if params.activeText then self.activeText=params.activeText end if params.inactiveText then self.inactiveText=params.inactiveText end if params.activeBgColor then self.activeBgColor=params.activeBgColor end if params.inactiveBgColor then self.inactiveBgColor=params.inactiveBgColor end if params.activeTextColor then self.activeTextColor=params.activeTextColor end if params.inactiveTextColor then self.inactiveTextColor=params.inactiveTextColor end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Switch end local Switch=Switch()local function Line()local Line={}Line.__index=Line function Line:new(x1,y1,x2,y2,color,bgColor,char,zIndex)if type(x1)=="table" then local params=x1 x1=params.x1 y1=params.y1 x2=params.x2 y2=params.y2 color=params.color bgColor=params.bgColor char=params.char zIndex=params.zIndex end local obj=setmetatable({},self)obj.x1=x1 or 0 obj.y1=y1 or 0 obj.x2=x2 or 0 obj.y2=y2 or 0 obj.color=color or colors.white obj.bgColor=bgColor or colors.black obj.char=char or "-" obj.zIndex=zIndex or 0 return obj end function Line:setCoordinates(x1,y1,x2,y2)self.x1=x1 or self.x1 self.y1=y1 or self.y1 self.x2=x2 or self.x2 self.y2=y2 or self.y2 self.frame:draw()return self end function Line:setColors(color,bgColor)self.color=color or self.color self.bgColor=bgColor or self.bgColor self.frame:draw()return self end function Line:setChar(char)self.char=char or self.char self.frame:draw()return self end function Line:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Line:draw(canvas)if self.y1==self.y2 then for x=self.x1,self.x2 do if canvas[self.y1]and canvas[self.y1][x]then if self.bgColor~="alpha" then canvas[self.y1][x].bgColor=self.bgColor end canvas[self.y1][x].char=self.char canvas[self.y1][x].charColor=self.color end end elseif self.x1==self.x2 then for y=self.y1,self.y2 do if canvas[y]and canvas[y][self.x1]then if self.bgColor~="alpha" then canvas[y][self.x1].bgColor=self.bgColor end canvas[y][self.x1].char=self.char canvas[y][self.x1].charColor=self.color end end else local dx=math.abs(self.x2-self.x1)local dy=math.abs(self.y2-self.y1)local sx=self.x1<self.x2 and 1 or-1 local sy=self.y1<self.y2 and 1 or-1 local err=dx-dy local x=self.x1 local y=self.y1 while true do if canvas[y]and canvas[y][x]then if self.bgColor~="alpha" then canvas[y][x].bgColor=self.bgColor end canvas[y][x].char=self.char canvas[y][x].charColor=self.color end if x==self.x2 and y==self.y2 then break end local e2=2*err if e2>-dy then err=err-dy x=x+sx end if e2<dx then err=err+dx y=y+sy end end end end function Line:setParams(params)if params.x1 then self.x1=params.x1 end if params.y1 then self.y1=params.y1 end if params.x2 then self.x2=params.x2 end if params.y2 then self.y2=params.y2 end if params.color then self.color=params.color end if params.bgColor then self.bgColor=params.bgColor end if params.char then self.char=params.char end if params.zIndex then self.zIndex=params.zIndex end self.frame:draw()return self end return Line end local Line=Line()local function Circle()local Circle={}Circle.__index=Circle function Circle:new(x1,y1,x2,y2,color,fill,char,charColor,zIndex)if type(x1)=="table" then local params=x1 x1=params.x1 y1=params.y1 x2=params.x2 y2=params.y2 color=params.color fill=params.fill char=params.char charColor=params.charColor zIndex=params.zIndex end local obj=setmetatable({},self)obj.x1=x1 or 0 obj.y1=y1 or 0 obj.x2=x2 or 5 obj.y2=y2 or 5 obj.color=color or colors.white obj.fill=fill or false obj.char=char or " " obj.charColor=charColor or colors.white obj.zIndex=zIndex or 0 obj.pixels={}obj:update()return obj end function Circle:setPosition(x1,y1,x2,y2)self.x1=x1 or self.x1 self.y1=y1 or self.y1 self.x2=x2 or self.x2 self.y2=y2 or self.y2 self:update()self.frame:draw()return self end function Circle:setColors(color,charColor)self.color=color or self.color self.charColor=charColor or self.charColor self.frame:draw()return self end function Circle:setFill(fill)self.fill=fill or self.fill self:update()self.frame:draw()return self end function Circle:setChar(char)self.char=char or self.char self.frame:draw()return self end function Circle:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex self.frame:draw()return self end function Circle:update()local centerX=(self.x1+self.x2)/2 local centerY=(self.y1+self.y2)/2 local radiusX=math.abs(self.x2-self.x1)/2 local radiusY=math.abs(self.y2-self.y1)/2 local circumference=2*math.pi*math.min(radiusX,radiusY)local step=1/circumference self.pixels={}for theta=0,math.pi/2,step do local x=centerX+radiusX*math.cos(theta)local y=centerY+radiusY*math.sin(theta)table.insert(self.pixels,{math.floor(x+0.5),math.floor(y+0.5)})end local quarterPixels={}for _,pixel in ipairs(self.pixels)do table.insert(quarterPixels,{2*centerX-pixel[1],pixel[2]})table.insert(quarterPixels,{pixel[1],2*centerY-pixel[2]})table.insert(quarterPixels,{2*centerX-pixel[1],2*centerY-pixel[2]})end for _,pixel in ipairs(quarterPixels)do table.insert(self.pixels,pixel)end if self.fill then for y=self.y1,self.y2 do for x=self.x1,self.x2 do local dx=(x-centerX)/radiusX local dy=(y-centerY)/radiusY if dx*dx+dy*dy<=1 then table.insert(self.pixels,{x,y})end end end end end function Circle:draw(canvas)self.canvas=canvas for _,pixel in ipairs(self.pixels)do local x=pixel[1]local y=pixel[2]if self.canvas[y]and self.canvas[y][x]then if self.color~="alpha" then self.canvas[y][x].bgColor=self.color end self.canvas[y][x].char=self.char self.canvas[y][x].charColor=self.charColor end end end function Circle:setParams(params)if params.x1 then self.x1=params.x1 end if params.y1 then self.y1=params.y1 end if params.x2 then self.x2=params.x2 end if params.y2 then self.y2=params.y2 end if params.color then self.color=params.color end if params.charColor then self.charColor=params.charColor end if params.fill~=nil then self.fill=params.fill end if params.char then self.char=params.char end if params.zIndex then self.zIndex=params.zIndex end self:update()self.frame:draw()return self end return Circle end local Circle=Circle()local function Image()local Image={}Image.__index=Image function Image:new(x,y,filePath,zIndex)if type(x)=='table' then local params=x x=params.x y=params.y filePath=params.filePath zIndex=params.zIndex end local obj=setmetatable({},self)obj.x=x or 1 obj.y=y or 1 obj.canvas={}obj.zIndex=zIndex or 0 if filePath then self:loadFile(filePath)end return obj end function Image:loadFile(filePath)local file=fs.open(filePath,"r")if not file then error("File not found: "..filePath)end local content=file.readAll()file.close()self.canvas=self:unserialize(content)return self end function Image:unserialize(content)local data=textutils.unserialize(content)local canvas={}for i,row in ipairs(data)do canvas[i]={}for j,pixel in ipairs(row)do canvas[i][j]={char=pixel[1],charColor=pixel[2],bgColor=pixel[3]}end end return canvas end function Image:draw(canvas)for i,row in ipairs(self.canvas)do for j,pixel in ipairs(row)do local x=self.x+j-1 local y=self.y+i-1 if canvas[y]and canvas[y][x]then if pixel.bgColor~="alpha" then canvas[y][x].bgColor=pixel.bgColor end canvas[y][x].char=pixel.char canvas[y][x].charColor=pixel.charColor end end end end function Image:setPosition(x,y)self.x=x or self.x self.y=y or self.y return self end function Image:setZIndex(zIndex)self.zIndex=zIndex or self.zIndex return self end function Image:setParams(params)if params.x then self.x=params.x end if params.y then self.y=params.y end if params.filePath then self:loadFile(params.filePath)end if params.zIndex then self.zIndex=params.zIndex end return self end return Image end local Image=Image()function Frame:new(x,y,width,height,parent,name)local termWidth,termHeight=term.getSize()x=x or 1 y=y or 1 width=width or termWidth height=height or termHeight local obj=setmetatable({},self)obj.win=parent or term.current()obj.name=name obj.components={}obj.keyHandler=KeyHandler:new()obj.canvas={}obj.visible=true for i=1,height do obj.canvas[i]={}for j=1,width do obj.canvas[i][j]={bgColor=colors.black,char=" ",charColor=colors.white}end end return obj end function Frame:setVisible(visible)self.visible=visible or true end function Frame:addLabel(x,y,text,textColor,bgColor,zIndex)local label=Label:new(x,y,text,textColor,bgColor,zIndex or#self.components)label.frame=self table.insert(self.components,label)return label end function Frame:addButton(x,y,label,callback,bgColor,textColor,width,height,zIndex)local button=Button:new(x,y,label,callback,bgColor,textColor,width,height,zIndex or#self.components)button.frame=self table.insert(self.components,button)return button end function Frame:addInput(x,y,width,maxLength,bgColor,textColor,replaceChar,history,completeFn,default,callback,deactivateOnEnter,zIndex)local input=Input:new(x,y,width,maxLength,bgColor,textColor,replaceChar,history,completeFn,default,callback,deactivateOnEnter,zIndex or#self.components)input.frame=self table.insert(self.components,input)return input end function Frame:addTextarea(x,y,width,height,bgColor,textColor,zIndex)local textarea=Textarea:new(x,y,width,height,bgColor,textColor,zIndex or#self.components)textarea.frame=self table.insert(self.components,textarea)return textarea end function Frame:addRect(x,y,width,height,bgColor,fill,char,charColor,zIndex)local rect=Rect:new(x,y,width,height,bgColor,fill,char,charColor,zIndex or#self.components)rect.frame=self table.insert(self.components,rect)return rect end function Frame:addDropdown(x,y,width,items,bgColor,textColor,zIndex)local dropdown=Dropdown:new(x,y,width,items,bgColor,textColor,zIndex or#self.components)dropdown.frame=self table.insert(self.components,dropdown)return dropdown end function Frame:addSwitch(x,y,state,callback,activeText,inactiveText,activeBgColor,inactiveBgColor,activeTextColor,inactiveTextColor,zIndex)local switch=Switch:new(x,y,state,callback,activeText,inactiveText,activeBgColor,inactiveBgColor,activeTextColor,inactiveTextColor,zIndex or#self.components)switch.frame=self table.insert(self.components,switch)return switch end function Frame:addLine(x1,y1,x2,y2,color,bgColor,char,zIndex)local line=Line:new(x1,y1,x2,y2,color,bgColor,char,zIndex or#self.components)line.frame=self table.insert(self.components,line)return line end function Frame:addCircle(x1,y1,x2,y2,color,fill,char,charColor,zIndex)local circle=Circle:new(x1,y1,x2,y2,color,fill,char,charColor,zIndex or#self.components)circle.frame=self table.insert(self.components,circle)return circle end function Frame:addImage(x,y,filePath,zIndex)local image=Image:new(x,y,filePath,zIndex or#self.components)image.frame=self table.insert(self.components,image)return image end function Frame:addComp(comp)comp.frame=self table.insert(self.components,comp)return comp end function Frame:addKeyHandler()return self.keyHandler end function Frame:draw()if not self.visible then return end local win=self.win for y,row in ipairs(self.canvas)do for x,_ in ipairs(row)do self.canvas[y][x]={bgColor=colors.black,char=" ",charColor=colors.white}end end table.sort(self.components,function(a,b)return(a.zIndex or 0)<(b.zIndex or 0)end)for _,comp in ipairs(self.components)do if comp.draw then comp:draw(self.canvas)end end for y,row in ipairs(self.canvas)do for x,pixel in ipairs(row)do win.setCursorPos(x,y)if pixel.bgColor~="alpha" and pixel.bgColor then win.setBackgroundColor(pixel.bgColor)end if pixel.charColor then win.setTextColor(pixel.charColor)end if pixel.char then win.write(pixel.char)end end end end function Frame:handleClick(x,y)for _,comp in ipairs(self.components)do if getmetatable(comp)==Dropdown and comp:isExpanded()then comp:handleClick(x,y)return end end for _,comp in ipairs(self.components)do if comp.handleClick then comp:handleClick(x,y)end end end function Frame:handleKey(key)for _,comp in ipairs(self.components)do if getmetatable(comp)==Input and comp.active then return elseif getmetatable(comp)==Dropdown and comp.expanded then comp:handleKey(key)return end end self.keyHandler:handleKey(key)end function Frame:update(event,param1,param2,param3)if not self.visible then return end if self.name then if event=="monitor_touch" and self.name==param1 then self:handleClick(param2,param3)end else if event=="mouse_click" then self:handleClick(param2,param3)elseif event=="key" or event=="char" or event=="paste" then self:handleKey(param1)for _,comp in ipairs(self.components)do if comp.handleInput then comp:handleInput(event,param1)elseif getmetatable(comp)==Textarea then if param1==keys.up then comp:scrollUp()elseif param1==keys.down then comp:scrollDown()end end end elseif event=="mouse_scroll" then for _,comp in ipairs(self.components)do if getmetatable(comp)==Dropdown and comp.expanded then comp:handleScroll(param1)elseif getmetatable(comp)==Textarea and comp:isMouseOver(param2,param3)then if param1==-1 then comp:scrollUp()elseif param1==1 then comp:scrollDown()end end end end end self:draw()end return Frame end local Frame=components_Frame()function GUI:new(frames)local obj=setmetatable({},self)obj.frames={}or frames return obj end function GUI:addFrame(x,y,width,height,parent,name)local frame=Frame:new(x,y,width,height,parent,name)table.insert(self.frames,frame)return frame end function GUI:update(event,param1,param2,param3)for _,frame in ipairs(self.frames)do frame:update(event,param1,param2,param3)end end function GUI:run(...)parallel.waitForAny(function()while true do local event,param1,param2,param3=os.pullEvent()self:update(event,param1,param2,param3)end end)end return GUI:new()